import os, json, re, uuid
from datetime import datetime, timedelta, timezone
from typing import Dict, Any
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, constants
)
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, ContextTypes, MessageHandler, filters
)

# ===============================
# ENV
# ===============================

def getenv_int(name: str, default: int) -> int:
    val = os.getenv(name)
    try:
        return int(val) if val and val.strip() else default
    except Exception:
        return default

STATE_FILE = os.getenv("STATE_FILE", "state.json")
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_IDS = set(int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x)
DEFAULT_TTL_MIN = getenv_int("DEFAULT_TTL_MIN", 15)

# ===============================
# State helpers
# ===============================

def load_state() -> Dict[str, Any]:
    if not os.path.exists(STATE_FILE):
        return {"admins": list(ADMIN_IDS), "chats": [], "broadcasts": {}}
    with open(STATE_FILE, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
        except Exception:
            data = {"admins": list(ADMIN_IDS), "chats": [], "broadcasts": {}}
    data["admins"] = list(set(data.get("admins", [])) | ADMIN_IDS)
    data.setdefault("chats", [])
    data.setdefault("broadcasts", {})
    return data

def save_state(state: Dict[str, Any]) -> None:
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def is_admin(uid: int, state: Dict[str, Any]) -> bool:
    return uid in set(state.get("admins", []))

def short_id(bid: str) -> str:
    return bid.split("-")[0]

# ===============================
# Rendering
# ===============================

def build_keyboard(bid: str, state: Dict[str, Any]):
    bc = state["broadcasts"].get(bid)
    if not bc or bc.get("expired", False):
        return None
    if not bc.get("claimed_by"):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å", callback_data=f"claim:{bid}")]
        ])
    if not bc.get("done"):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ôªÔ∏è –°–Ω—è—Ç—å", callback_data=f"unclaim:{bid}")],
            [InlineKeyboardButton("‚úîÔ∏è –ò—Å–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{bid}")]
        ])
    return None

def human_name(u) -> str:
    parts = [p for p in [u.first_name, u.last_name] if p]
    base = " ".join(parts) if parts else (u.username or f"id:{u.id}")
    return f"{base} (@{u.username})" if u.username else base

def fmt_deadline(created_at_iso: str, ttl_min: int) -> str:
    created_dt = datetime.fromisoformat(created_at_iso)
    return (created_dt + timedelta(minutes=ttl_min)).strftime("%Y-%m-%d %H:%M")

def render_message(bid: str, state: Dict[str, Any]) -> str:
    bc = state["broadcasts"][bid]
    if bc.get("expired"):
        status = "üî¥ –°—Ç–∞—Ç—É—Å: –∏—Å—Ç—ë–∫ —Å—Ä–æ–∫"
    elif bc.get("done"):
        status = f"üü¢ –°—Ç–∞—Ç—É—Å: –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî {bc['claimed_by']['name']}"
    elif bc.get("claimed_by"):
        status = f"üü° –°—Ç–∞—Ç—É—Å: –≤–∑—è—Ç–∞ ‚Äî {bc['claimed_by']['name']}"
    else:
        status = "üü¢ –°—Ç–∞—Ç—É—Å: —Å–≤–æ–±–æ–¥–Ω–∞"
    deadline = fmt_deadline(bc["created_at"], bc["ttl_min"])
    return (
        f"üì£ <b>–ó–∞—è–≤–∫–∞ #{short_id(bid)}</b>\n"
        f"{bc['text']}\n\n"
        f"‚è≥ –ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ: <b>{deadline}</b> (‚âà{bc['ttl_min']} –º–∏–Ω)\n"
        f"{status}"
    )

def parse_broadcast_args(raw: str):
    raw = raw.strip()
    m = re.match(
        r"^\s*(ttl\s*=\s*|\s*)(?P<num>\d{1,3})\s*(m|min|–º–∏–Ω)?\s*(?P<rest>.*)$",
        raw, flags=re.IGNORECASE
    )
    ttl = None
    if m and m.group("num") and m.group("rest"):
        try:
            x = int(m.group("num"))
            if 1 <= x <= 180:
                ttl = x
            raw = m.group("rest").strip()
        except Exception:
            pass
    return (ttl or DEFAULT_TTL_MIN), raw

# ===============================
# Commands
# ===============================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    role = "–∞–¥–º–∏–Ω" if is_admin(update.effective_user.id, state) else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/register ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç\n"
        "/unregister ‚Äî —É–±—Ä–∞—Ç—å —á–∞—Ç\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã\n"
        "/broadcast <TTL> <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∑–∞—è–≤–∫—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
        "/new ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∫–Ω–æ–ø–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
        f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {role}\n"
        f"TTL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_TTL_MIN} –º–∏–Ω",
        parse_mode=constants.ParseMode.HTML
    )

help_cmd = start

async def register_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    if not is_admin(update.effective_user.id, state):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã.")
        return
    cid = update.effective_chat.id
    if cid not in state["chats"]:
        state["chats"].append(cid)
        save_state(state)
        await update.message.reply_text(f"–ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {update.effective_chat.title or cid}")
    else:
        await update.message.reply_text("–ß–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")

async def unregister_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    if not is_admin(update.effective_user.id, state):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–±–∏—Ä–∞—Ç—å —á–∞—Ç—ã.")
        return
    cid = update.effective_chat.id
    if cid in state["chats"]:
        state["chats"].remove(cid)
        save_state(state)
        await update.message.reply_text(f"–ß–∞—Ç —É–¥–∞–ª—ë–Ω: {update.effective_chat.title or cid}")
    else:
        await update.message.reply_text("–≠—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

async def list_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    lines = [f"‚Ä¢ {cid}" for cid in state["chats"]] or ["(–ø—É—Å—Ç–æ)"]
    await update.message.reply_text("–¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã:\n" + "\n".join(lines))

# ===============================
# Broadcast
# ===============================

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    if not is_admin(update.effective_user.id, state):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return
    if not state["chats"]:
        await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤. /register")
        return
    raw = re.sub(r"^/broadcast(@\w+)?\s*", "", update.message.text or "", flags=re.IGNORECASE)
    ttl_min, text = parse_broadcast_args(raw)
    if not text:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /broadcast <TTL> <—Ç–µ–∫—Å—Ç>")
        return
    bid = str(uuid.uuid4())
    created_at = datetime.now(timezone.utc).replace(tzinfo=None).isoformat(timespec="seconds")
    state["broadcasts"][bid] = {
        "text": text, "created_at": created_at,
        "ttl_min": ttl_min, "messages": [],
        "claimed_by": None, "expired": False, "done": False
    }
    save_state(state)
    ok = fail = 0
    for cid in list(state["chats"]):
        try:
            msg = await context.bot.send_message(
                chat_id=cid, text=render_message(bid, state),
                reply_markup=build_keyboard(bid, state),
                parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True
            )
            state["broadcasts"][bid]["messages"].append(
                {"chat_id": cid, "message_id": msg.message_id}
            )
            ok += 1
        except Exception:
            fail += 1
    save_state(state)
    await schedule_expiration(context, bid, ttl_min)
    await update.message.reply_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {ok}, –æ—à–∏–±–∫–∏: {fail}. "
        f"–ó–∞—è–≤–∫–∞ #{short_id(bid)} (TTL {ttl_min} –º–∏–Ω)."
    )

async def schedule_expiration(context: ContextTypes.DEFAULT_TYPE, bid: str, ttl_min: int):
    context.job_queue.run_once(expire_job, when=timedelta(minutes=ttl_min), data={"bid": bid})

async def expire_job(ctx: ContextTypes.DEFAULT_TYPE):
    bid = ctx.job.data["bid"]
    state = load_state()
    bc = state["broadcasts"].get(bid)
    if not bc or bc.get("expired"):
        return
    bc["expired"] = True
    save_state(state)
    for msg in bc.get("messages", []):
        try:
            await ctx.bot.edit_message_text(
                chat_id=msg["chat_id"], message_id=msg["message_id"],
                text=render_message(bid, state),
                parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True
            )
        except Exception:
            pass

# ===============================
# Claim / Unclaim / Done
# ===============================

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    m = re.match(r"^(claim|unclaim|done):(.+)$", data)
    if not m:
        return
    action, bid = m.group(1), m.group(2)
    bc = state["broadcasts"].get(bid)
    if not bc:
        await q.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    if bc.get("expired"):
        await q.answer("–°—Ä–æ–∫ –∑–∞—è–≤–∫–∏ –∏—Å—Ç—ë–∫.", show_alert=True)
        return
    user = q.from_user
    if action == "claim":
        if bc.get("claimed_by"):
            await q.answer("–£–∂–µ –≤–∑—è–ª–∏.")
            return
        bc["claimed_by"] = {"id": user.id, "name": human_name(user)}
    elif action == "unclaim":
        claimer = bc.get("claimed_by")
        if not claimer:
            await q.answer("–£–∂–µ —Å–≤–æ–±–æ–¥–Ω–∞.")
            return
        if user.id != claimer.get("id") and not is_admin(user.id, state):
            await q.answer("–°–Ω—è—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω.", show_alert=True)
            return
        bc["claimed_by"] = None
    elif action == "done":
        claimer = bc.get("claimed_by")
        if not claimer:
            await q.answer("–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∑–∞–Ω—è—Ç—É—é –∑–∞—è–≤–∫—É.", show_alert=True)
            return
        if user.id != claimer.get("id") and not is_admin(user.id, state):
            await q.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω.", show_alert=True)
            return
        bc["done"] = True
    save_state(state)
    kb = build_keyboard(bid, state)
    for msg in bc.get("messages", []):
        try:
            await context.bot.edit_message_text(
                chat_id=msg["chat_id"], message_id=msg["message_id"],
                text=render_message(bid, state), reply_markup=kb,
                parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True
            )
        except Exception:
            pass

# ===============================
# /new ‚Äî —à–∞–±–ª–æ–Ω—ã –∏ –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–µ–∂–∏–º
# ===============================

async def new_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    if not is_admin(update.effective_user.id, state):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("RUB‚ÜíUSDT | –°–±–µ—Ä | 20 –º–∏–Ω", callback_data="tpl:RUB‚ÜíUSDT|–°–±–µ—Ä|20")],
        [InlineKeyboardButton("USDT‚ÜíRUB | –¢–∏–Ω—å–∫–æ—Ñ—Ñ | 60 –º–∏–Ω", callback_data="tpl:USDT‚ÜíRUB|–¢–∏–Ω—å–∫–æ—Ñ—Ñ|60")],
        [InlineKeyboardButton("RUB‚ÜíUSDT | –ê–ª—å—Ñ–∞ | –¥–µ–Ω—å", callback_data="tpl:RUB‚ÜíUSDT|–ê–ª—å—Ñ–∞|180")],
        [InlineKeyboardButton("–°–æ–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é ‚û°Ô∏è", callback_data="manual:start")]
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=kb)

async def new_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    # –ë—ã—Å—Ç—Ä—ã–π —à–∞–±–ª–æ–Ω
    if data.startswith("tpl:"):
        _, payload = data.split(":", 1)
        direction, bank, ttl_str = payload.split("|")
        ttl_min = int(ttl_str)
        text = f"{direction}\n–ë–∞–Ω–∫: {bank}\n–í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {ttl_min if ttl_min < 180 else '–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è'}"
        fake_update = update
        fake_update.message = q.message  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await broadcast_simple(fake_update, context, text, ttl_min)
        return
    # –ü–æ—à–∞–≥–æ–≤—ã–π (—É–ø—Ä–æ—â—ë–Ω–Ω–æ: —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥–∏)
    if data == "manual:start":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("RUB‚ÜíUSDT", callback_data="manual:dir:RUB‚ÜíUSDT")],
            [InlineKeyboardButton("USDT‚ÜíRUB", callback_data="manual:dir:USDT‚ÜíRUB")]
        ])
        await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=kb)
    elif data.startswith("manual:dir:"):
        direction = data.split(":", 2)[2]
        context.user_data["new_direction"] = direction
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–±–µ—Ä", callback_data="manual:bank:–°–±–µ—Ä")],
            [InlineKeyboardButton("–ê–ª—å—Ñ–∞", callback_data="manual:bank:–ê–ª—å—Ñ–∞")],
            [InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="manual:bank:–¢–∏–Ω—å–∫–æ—Ñ—Ñ")],
            [InlineKeyboardButton("–°–ë–ü", callback_data="manual:bank:–°–ë–ü")]
        ])
        await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=kb)
    elif data.startswith("manual:bank:"):
        bank = data.split(":", 2)[2]
        context.user_data["new_bank"] = bank
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("20 –º–∏–Ω—É—Ç", callback_data="manual:ttl:20")],
            [InlineKeyboardButton("1 —á–∞—Å", callback_data="manual:ttl:60")],
            [InlineKeyboardButton("–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è", callback_data="manual:ttl:180")]
        ])
        await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=kb)
    elif data.startswith("manual:ttl:"):
        ttl_min = int(data.split(":", 2)[2])
        direction = context.user_data.get("new_direction")
        bank = context.user_data.get("new_bank")
        text = f"{direction}\n–ë–∞–Ω–∫: {bank}\n–í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {ttl_min if ttl_min<180 else '–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è'}"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"manual:send:{ttl_min}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manual:cancel")]
        ])
        context.user_data["new_text"] = text
        context.user_data["new_ttl"] = ttl_min
        await q.message.edit_text(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:\n\n{text}", reply_markup=kb)
    elif data.startswith("manual:send:"):
        ttl_min = context.user_data.get("new_ttl")
        text = context.user_data.get("new_text")
        fake_update = update
        fake_update.message = q.message
        await broadcast_simple(fake_update, context, text, ttl_min)
        context.user_data.clear()
    elif data == "manual:cancel":
        context.user_data.clear()
        await q.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def broadcast_simple(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, ttl_min: int):
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é
    state = load_state()
    bid = str(uuid.uuid4())
    created_at = datetime.now(timezone.utc).replace(tzinfo=None).isoformat(timespec="seconds")
    state["broadcasts"][bid] = {
        "text": text, "created_at": created_at,
        "ttl_min": ttl_min, "messages": [],
        "claimed_by": None, "expired": False, "done": False
    }
    save_state(state)
    for cid in list(state["chats"]):
        try:
            msg = await context.bot.send_message(
                chat_id=cid, text=render_message(bid, state),
                reply_markup=build_keyboard(bid, state),
                parse_mode=constants.ParseMode.HTML
            )
            state["broadcasts"][bid]["messages"].append(
                {"chat_id": cid, "message_id": msg.message_id}
            )
        except Exception:
            pass
    save_state(state)
    await schedule_expiration(context, bid, ttl_min)
    await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ #{short_id(bid)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# ===============================
# Main
# ===============================

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–±–µ—Ä–∏—Ç–µ /help.")

def main():
    if not BOT_TOKEN:
        print("ERROR: BOT_TOKEN is not set.")
        return
    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler(["start", "help"], start))
    app.add_handler(CommandHandler("register", register_chat))
    app.add_handler(CommandHandler("unregister", unregister_chat))
    app.add_handler(CommandHandler("list", list_chats))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CommandHandler("new", new_cmd))
    app.add_handler(CallbackQueryHandler(on_callback, pattern="^(claim|unclaim|done):"))
    app.add_handler(CallbackQueryHandler(new_callback, pattern="^(tpl:|manual:)"))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))
    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
